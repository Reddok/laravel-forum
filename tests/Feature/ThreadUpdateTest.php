<?php

namespace Tests\Feature;

use App\Thread;
use App\User;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;


class ThreadUpdateTest extends TestCase
{
    use DatabaseMigrations;

    protected $thread;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->withExceptionHandling();
        $this->signIn();
        $this->thread = create(Thread::class, ['user_id' => auth()->id()]);
    }

    /** @test */
    public function not_owner_cant_update_the_thread()
    {
        $thread = create(Thread::class, ['user_id' => create(User::class)->id]);

        $this->patch(route('threads.update', ['channel' => $thread->channel, 'thread' => $thread]), [])
            ->assertStatus(403);
    }

    /** @test */
    public function body_and_title_must_be_set_for_update()
    {
        $this->patch(route('threads.update', ['channel' => $this->thread->channel, 'thread' => $this->thread]), ['title' => 'Some TItle'])
            ->assertSessionHasErrors(['body']);

        $this->patch(route('threads.update', ['channel' => $this->thread->channel, 'thread' => $this->thread]), ['body' => 'Some Body'])
            ->assertSessionHasErrors(['title']);
    }

    /** @test */
    public function user_can_update_thread()
    {
        $newAttrs = [
            'title' => 'New Title',
            'body' => 'New Body'
        ];

        $this->patch(route('threads.update', ['channel' => $this->thread->channel, 'thread' => $this->thread]), $newAttrs);
        $freshed = $this->thread->fresh();

        $this->assertEquals($freshed->title, $newAttrs['title']);
        $this->assertEquals($freshed->body, $newAttrs['body']);
    }
}
